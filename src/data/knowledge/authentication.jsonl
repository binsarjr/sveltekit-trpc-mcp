{"question":"How do you implement authentication in tRPC SvelteKit?","answer":"Implement authentication by creating middleware that checks for valid sessions/tokens. Add user information to the context and protect procedures with authentication middleware. Use SvelteKit's session handling or JWT tokens stored in cookies for authentication state management."}
{"question":"How do you create authentication middleware in tRPC?","answer":"Create middleware using `t.middleware()` that validates authentication tokens or sessions. Check for valid credentials in the context and throw `TRPCError` with code 'UNAUTHORIZED' if authentication fails. Apply this middleware to protected procedures with `.use(authMiddleware)`."}
{"question":"How do you handle user sessions in tRPC SvelteKit?","answer":"Extract session information from cookies or headers in your context function. Use SvelteKit's built-in session handling or implement JWT verification. Make the user data available through context so protected procedures can access current user information."}
{"question":"How do you protect tRPC procedures with authorization?","answer":"Create authorization middleware that checks user permissions after authentication. Verify user roles or permissions against the requested operation. Use procedure-specific or role-based middleware to protect sensitive operations and data access."}
{"question":"How do you implement login/logout procedures in tRPC?","answer":"Create mutation procedures for login (validate credentials, generate tokens/sessions) and logout (invalidate tokens/sessions). Handle cookie setting for session management and return appropriate user data or confirmation messages. Use proper error handling for invalid credentials."}
{"question":"How do you handle JWT tokens in tRPC SvelteKit?","answer":"Store JWT tokens in HTTP-only cookies for security. Extract and verify tokens in your context function using a JWT library. Include user information in the context for authenticated requests. Handle token refresh and expiration gracefully in your authentication middleware."}