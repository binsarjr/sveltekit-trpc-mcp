{"question":"What is tRPC?","answer":"tRPC is a TypeScript-first toolkit for building type-safe APIs. It enables end-to-end type safety, allowing you to share types between your client and server without code generation. tRPC provides automatic type inference, making it easy to build APIs with excellent developer experience and runtime safety."}
{"question":"What is tRPC-SvelteKit?","answer":"tRPC-SvelteKit is a package that integrates tRPC with SvelteKit applications. It provides seamless type-safe communication between your SvelteKit frontend and backend, leveraging SvelteKit's built-in features like load functions and server-side rendering while maintaining end-to-end type safety."}
{"question":"How do you install tRPC-SvelteKit?","answer":"Install tRPC-SvelteKit with: `npm install trpc-sveltekit @trpc/server @trpc/client`. This provides the core tRPC functionality along with SvelteKit-specific integrations for creating type-safe APIs in your SvelteKit application."}
{"question":"What is a tRPC router?","answer":"A tRPC router is the core building block that defines your API endpoints. It's created using `t.router()` and contains procedures (queries, mutations, subscriptions) that handle different operations. Routers can be nested and composed together to create larger, more organized APIs."}
{"question":"What are tRPC procedures?","answer":"tRPC procedures are the individual endpoints in your API. There are three types: queries (for reading data), mutations (for writing/updating data), and subscriptions (for real-time data). Each procedure can have input validation, middleware, and type-safe return values."}
{"question":"What is tRPC context?","answer":"tRPC context is an object that contains data available to all procedures, such as database connections, user authentication, request information, and other shared resources. Context is created per request and passed to every procedure, enabling access to request-specific data and services."}