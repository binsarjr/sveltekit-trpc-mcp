{"question":"How do you create a query procedure in tRPC?","answer":"Create a query procedure using `t.procedure.query()`. Queries are for reading data and should be idempotent. Add input validation with `.input(z.object(...))` and implement the resolver function that returns the data. Example: `greeting: t.procedure.query(() => 'Hello World')`."}
{"question":"How do you create a mutation procedure in tRPC?","answer":"Create a mutation procedure using `t.procedure.mutation()`. Mutations are for creating, updating, or deleting data. Use `.input()` for validation and implement the resolver with the business logic. Example: `createUser: t.procedure.input(z.object({name: z.string()})).mutation(({input}) => createUser(input))`."}
{"question":"How do you add input validation to tRPC procedures?","answer":"Use Zod schemas with the `.input()` method to validate procedure inputs. tRPC automatically validates the input and provides type safety. Example: `.input(z.object({id: z.string(), name: z.string().min(1)}))`. The validated input is available in your resolver function."}
{"question":"How do you use tRPC context in procedures?","answer":"Access context in procedure resolvers through the `ctx` parameter. Context contains request-specific data like user authentication, database connections, etc. Example: `({ctx}) => ctx.db.user.findMany()` where `ctx` contains your database instance."}
{"question":"How do you handle errors in tRPC procedures?","answer":"Throw `TRPCError` instances with appropriate error codes like 'BAD_REQUEST', 'UNAUTHORIZED', 'NOT_FOUND', etc. tRPC automatically handles error serialization and provides type-safe error handling on the client. Example: `throw new TRPCError({code: 'NOT_FOUND', message: 'User not found'})`."}
{"question":"How do you create subscription procedures in tRPC?","answer":"Create subscriptions using `t.procedure.subscription()` for real-time data streams. Subscriptions require a WebSocket connection and return an observable stream. Use them for live data updates like chat messages, notifications, or real-time dashboards."}