{"question":"How do you set up a basic tRPC router in SvelteKit?","answer":"Create a router in `lib/trpc/router.ts` using `t.router()`. Define your procedures with `t.procedure.query()` for read operations and `t.procedure.mutation()` for write operations. Export the router and use it in your SvelteKit app through the hooks system."}
{"question":"How do you create tRPC context in SvelteKit?","answer":"Create context in `lib/trpc/context.ts` by defining a `createContext` function that takes a SvelteKit RequestEvent and returns an object with shared data like database connections, user session, etc. This context is available in all your tRPC procedures."}
{"question":"How do you set up tRPC server hooks in SvelteKit?","answer":"In `hooks.server.ts`, import your router and create a tRPC handler using `createTRPCHandle` from trpc-sveltekit. This integrates tRPC with SvelteKit's request handling system, typically serving your API at `/trpc/*` endpoints."}
{"question":"How do you configure the tRPC client in SvelteKit?","answer":"Create a client helper in `lib/trpc/client.ts` using `createTRPCClient` or the SvelteKit-specific helper. This provides a type-safe client that can be used in both server-side (load functions) and client-side code to call your tRPC procedures."}
{"question":"What is the recommended project structure for tRPC SvelteKit?","answer":"Organize tRPC files in `lib/trpc/` with separate files for: `router.ts` (main router), `context.ts` (request context), `client.ts` (client helper), and optionally `routes/` folder for split route definitions and `middleware/` for reusable middleware functions."}
{"question":"How do you handle tRPC routes in SvelteKit's file-based routing?","answer":"tRPC doesn't interfere with SvelteKit's file-based routing. Your tRPC API endpoints are served through the hooks system (typically at `/trpc/*`), while your regular SvelteKit pages continue to work normally in the `routes/` directory."}