{"instruction":"Implement JWT authentication context","input":"Create context with JWT token verification","output":"// lib/trpc/context.ts\nimport jwt from 'jsonwebtoken';\nimport type { RequestEvent } from '@sveltejs/kit';\n\nexport async function createContext(event: RequestEvent) {\n  const token = event.cookies.get('auth-token');\n  let user = null;\n  \n  if (token) {\n    try {\n      const payload = jwt.verify(token, JWT_SECRET) as { userId: string };\n      user = await getUserById(payload.userId);\n    } catch (err) {\n      // Invalid token\n    }\n  }\n  \n  return { event, user };\n}"}
{"instruction":"Create login procedure with JWT","input":"Implement login mutation that sets JWT cookie","output":"const router = t.router({\n  login: t.procedure\n    .input(z.object({\n      email: z.string().email(),\n      password: z.string()\n    }))\n    .mutation(async ({ input, ctx }) => {\n      const user = await validateUser(input.email, input.password);\n      if (!user) {\n        throw new TRPCError({\n          code: 'UNAUTHORIZED',\n          message: 'Invalid credentials'\n        });\n      }\n      \n      const token = jwt.sign({ userId: user.id }, JWT_SECRET);\n      ctx.event.cookies.set('auth-token', token, {\n        httpOnly: true,\n        secure: true,\n        sameSite: 'strict'\n      });\n      \n      return { user };\n    })\n});"}
{"instruction":"Create logout procedure","input":"Implement logout mutation that clears authentication","output":"const router = t.router({\n  logout: t.procedure\n    .mutation(({ ctx }) => {\n      ctx.event.cookies.delete('auth-token');\n      return { success: true };\n    })\n});"}
{"instruction":"Create role-based authorization middleware","input":"Implement middleware for role-based access control","output":"const createRoleMiddleware = (allowedRoles: string[]) => {\n  return t.middleware(({ ctx, next }) => {\n    if (!ctx.user) {\n      throw new TRPCError({ code: 'UNAUTHORIZED' });\n    }\n    \n    if (!allowedRoles.includes(ctx.user.role)) {\n      throw new TRPCError({ code: 'FORBIDDEN' });\n    }\n    \n    return next({ ctx });\n  });\n};\n\nconst adminProcedure = t.procedure.use(createRoleMiddleware(['admin']));\n\nconst router = t.router({\n  deleteUser: adminProcedure\n    .input(z.object({ id: z.string() }))\n    .mutation(({ input }) => deleteUser(input.id))\n});"}