{"instruction":"Use tRPC in SvelteKit load function","input":"Call tRPC procedures in a page load function","output":"// routes/users/+page.ts\nimport { trpc } from '$lib/trpc/client';\nimport type { PageLoad } from './$types';\n\nexport const load: PageLoad = async (event) => {\n  const users = await trpc(event).users.list.query();\n  return {\n    users\n  };\n};"}
{"instruction":"Use tRPC in Svelte component","input":"Call tRPC procedures from a Svelte component","output":"<!-- routes/users/+page.svelte -->\n<script lang=\"ts\">\n  import { trpc } from '$lib/trpc/client';\n  import type { PageData } from './$types';\n  \n  export let data: PageData;\n  \n  let loading = false;\n  \n  async function createUser() {\n    loading = true;\n    try {\n      const newUser = await trpc().users.create.mutate({\n        name: 'John Doe',\n        email: 'john@example.com'\n      });\n      data.users = [...data.users, newUser];\n    } catch (error) {\n      console.error('Failed to create user:', error);\n    } finally {\n      loading = false;\n    }\n  }\n</script>\n\n<button on:click={createUser} disabled={loading}>\n  {loading ? 'Creating...' : 'Create User'}\n</button>"}
{"instruction":"Handle tRPC errors in component","input":"Implement error handling for tRPC calls","output":"<script lang=\"ts\">\n  import { TRPCClientError } from '@trpc/client';\n  import { trpc } from '$lib/trpc/client';\n  \n  let error = '';\n  \n  async function fetchUser(id: string) {\n    try {\n      const user = await trpc().users.byId.query({ id });\n      return user;\n    } catch (err) {\n      if (err instanceof TRPCClientError) {\n        error = err.message;\n        if (err.data?.code === 'NOT_FOUND') {\n          error = 'User not found';\n        }\n      } else {\n        error = 'An unexpected error occurred';\n      }\n    }\n  }\n</script>\n\n{#if error}\n  <div class=\"error\">{error}</div>\n{/if}"}
{"instruction":"Use tRPC with reactive stores","input":"Create a reactive store that uses tRPC","output":"// lib/stores/users.ts\nimport { writable } from 'svelte/store';\nimport { trpc } from '$lib/trpc/client';\n\nfunction createUserStore() {\n  const { subscribe, set, update } = writable([]);\n  \n  return {\n    subscribe,\n    async load() {\n      const users = await trpc().users.list.query();\n      set(users);\n    },\n    async create(userData) {\n      const newUser = await trpc().users.create.mutate(userData);\n      update(users => [...users, newUser]);\n      return newUser;\n    }\n  };\n}\n\nexport const userStore = createUserStore();"}