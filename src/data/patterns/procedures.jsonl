{"instruction":"Create a query procedure with input validation","input":"Create a tRPC query that fetches user by ID with Zod validation","output":"import { z } from 'zod';\n\nconst router = t.router({\n  getUserById: t.procedure\n    .input(z.object({ id: z.string() }))\n    .query(async ({ input, ctx }) => {\n      const user = await ctx.db.user.findUnique({\n        where: { id: input.id }\n      });\n      if (!user) {\n        throw new TRPCError({\n          code: 'NOT_FOUND',\n          message: 'User not found'\n        });\n      }\n      return user;\n    })\n});"}
{"instruction":"Create a mutation procedure","input":"Create a tRPC mutation for creating a new user","output":"const router = t.router({\n  createUser: t.procedure\n    .input(z.object({\n      name: z.string().min(1),\n      email: z.string().email()\n    }))\n    .mutation(async ({ input, ctx }) => {\n      const user = await ctx.db.user.create({\n        data: {\n          name: input.name,\n          email: input.email\n        }\n      });\n      return user;\n    })\n});"}
{"instruction":"Create a procedure with middleware","input":"Create a protected procedure that requires authentication","output":"const authMiddleware = t.middleware(({ ctx, next }) => {\n  if (!ctx.user) {\n    throw new TRPCError({\n      code: 'UNAUTHORIZED',\n      message: 'You must be logged in'\n    });\n  }\n  return next({ ctx: { ...ctx, user: ctx.user } });\n});\n\nconst protectedProcedure = t.procedure.use(authMiddleware);\n\nconst router = t.router({\n  getProfile: protectedProcedure.query(({ ctx }) => {\n    return ctx.user; // Now guaranteed to exist\n  })\n});"}
{"instruction":"Create nested routers","input":"Organize procedures into nested routers by feature","output":"const userRouter = t.router({\n  list: t.procedure.query(() => getUsers()),\n  byId: t.procedure\n    .input(z.object({ id: z.string() }))\n    .query(({ input }) => getUserById(input.id)),\n  create: t.procedure\n    .input(z.object({ name: z.string() }))\n    .mutation(({ input }) => createUser(input))\n});\n\nconst appRouter = t.router({\n  users: userRouter,\n  // other routers...\n});"}