{"instruction":"Create a basic tRPC router with TypeScript","input":"Set up a basic tRPC router with a simple greeting query","output":"// lib/trpc/router.ts\nimport { initTRPC } from '@trpc/server';\nimport type { Context } from './context';\n\nconst t = initTRPC.context<Context>().create();\n\nexport const router = t.router({\n  greeting: t.procedure.query(() => {\n    return 'Hello from tRPC!';\n  })\n});\n\nexport type Router = typeof router;"}
{"instruction":"Create tRPC context for SvelteKit","input":"Set up tRPC context that includes request information","output":"// lib/trpc/context.ts\nimport type { RequestEvent } from '@sveltejs/kit';\n\nexport async function createContext(event: RequestEvent) {\n  return {\n    event,\n    userAgent: event.request.headers.get('user-agent'),\n    // Add database, auth, etc.\n  };\n}\n\nexport type Context = Awaited<ReturnType<typeof createContext>>;"}
{"instruction":"Set up tRPC hooks in SvelteKit","input":"Configure tRPC server hooks for SvelteKit integration","output":"// hooks.server.ts\nimport { createTRPCHandle } from 'trpc-sveltekit';\nimport { router } from '$lib/trpc/router';\nimport { createContext } from '$lib/trpc/context';\n\nexport const handle = createTRPCHandle({\n  router,\n  createContext,\n  onError: ({ type, path, error }) => {\n    console.error(`tRPC error on ${path}:`, error);\n  }\n});"}
{"instruction":"Create tRPC client helper for SvelteKit","input":"Set up a tRPC client helper for use in SvelteKit","output":"// lib/trpc/client.ts\nimport { createTRPCClient, type TRPCClientInit } from 'trpc-sveltekit';\nimport type { Router } from './router';\n\nlet browserClient: ReturnType<typeof createTRPCClient<Router>>;\n\nexport function trpc(init?: TRPCClientInit) {\n  const isBrowser = typeof window !== 'undefined';\n  if (isBrowser && browserClient) return browserClient;\n  const client = createTRPCClient<Router>({ init });\n  if (isBrowser) browserClient = client;\n  return client;\n}"}